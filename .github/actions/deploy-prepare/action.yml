name: Prepare Deployment
description: Extracts Data to will feed deployment

inputs:
  github_token:
    description: Token required for deployment
    required: true
  reactions:
    description: Reaction Object to be used upon deployment
    default: '{"true": "+1", "false": "-1"}'
    required: false
  account_mapping:
    description: Account Mapping, used to validate accounts
    default: '{"development": "", "staging": "", "production": ""}'
    required: false

outputs:
  matrix:
    description: Matrix containing Environment and Target for deployment 
    value: ${{ steps.matrix.outputs.matrix}}
  is-valid-environment:
    description: Validates Deployment Enviroment ( development, staging, production )
    value: ${{ steps.validator.outputs.environment }}
  is-valid-lambdas-deployment:
    description: Validates Lambdas Deployment
    value: ${{ steps.validator.outputs.lambda }}
  is-valid-api-deployment:
    description: Validates API Deployment
    value: ${{ steps.validator.outputs.api }}


runs:
  using: composite
  steps:
  
    # Parse Comment
    - name: Get PR comment
      uses: actions-ecosystem/action-regex-match@v2
      id: get-pr-comment
      with:
        text: ${{ github.event.comment.body }}
        regex: '^(deploy) (lambdas|api) (development|staging|production)$'

    # Output Environment / Target matrix
    - name: Extract Environment
      id: matrix
      shell: bash
      run: |
        echo "matrix=[{ \"target\" : [\"${{ steps.get-pr-comment.outputs.group2 }}\"], \"environment\": [\"${{ steps.get-pr-comment.outputs.group3 }}\"] }]" >> "$GITHUB_OUTPUT"
        echo "target=${{ steps.get-pr-comment.outputs.group2 }} >> "$GITHUB_OUTPUT"
        echo "environment=${{ steps.get-pr-comment.outputs.group3 }}" >> "$GITHUB_OUTPUT"

    # Output Validators
    - name: Extract Validator
      id: validator
      shell: bash
      run: |
        echo "environment=${{ fromJSON(inputs.account_mapping)[steps.matrix.outputs.environment] != '' }}" >> "$GITHUB_OUTPUT"
        echo "lambda=${{ steps.matrix.outputs.target == 'lambdas' }}" >> "$GITHUB_OUTPUT"
        echo "api=${{ steps.matrix.outputs.target == 'api' }}" >> "$GITHUB_OUTPUT"

    # Set Global Validator
    - name: Set Env
      id: global-validator
      shell: bash
      run: |
        echo "is-valid-deployment=${{ (steps.validator.outputs.lambdas == 'true' || steps.validator.outputs.api == 'true') && steps.validator.outputs.environment == 'true' }}" >> ${GITHUB_OUTPUT}

    # React to Comment
    - uses: khan/pull-request-comment-trigger@v1.1.0
      id: check
      with:
        trigger: 'deploy' # no trigger cause at this point we are already valid
        reaction: '${{ fromJson(inputs.reactions)[steps.global-validator.outputs.is-valid-deployment] }}'
      env:
        GITHUB_TOKEN: '${{ inputs.github_token }}'

    # Quit if Deployment is invalid
    - name: Early Quit
      shell: bash
      if: steps.global-validator.outputs.is-valid-deployment == 'false'
      run: exit 1

    # Adds Deployment Job to the PR comments
    - name: Add comment to PR
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "" +
              "## Deploying `${{ steps.matrix.outputs.target }}` to `${{ steps.matrix.outputs.environment }}` \n" + 
              "Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          })
